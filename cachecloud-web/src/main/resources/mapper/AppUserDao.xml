<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sohu.cache.dao.AppUserDao">
	<!-- 
	字典sql
        set @tn='app_user';
        select
            group_concat(column_name)
        from
            information_schema.columns
        where
            table_schema = 'cache-cloud' and table_name = @tn;
	-->
	<sql id="user_column">
		id,name,ch_name,email,mobile,weChat,type,isAlert,password,company,purpose,register_time,biz_id
    </sql>

    <sql id="user_insert_column">
		id,name,ch_name,email,mobile,weChat,type,isAlert,password,company,purpose, biz_id
    </sql>

    <select id="get" resultType="com.sohu.cache.entity.AppUser" parameterType="long">
        select           
        	<include refid="user_column"/>
        from app_user
        where id = #{id};
    </select>
    
    <select id="getByName" resultType="com.sohu.cache.entity.AppUser" parameterType="string">
        select           
        	<include refid="user_column"/>
        from app_user
        where binary name = #{name};
    </select>

    <select id="getByEmail" resultType="com.sohu.cache.entity.AppUser" parameterType="string">
        select
        <include refid="user_column"/>
        from app_user
        where email = #{email};
    </select>
    
    <insert id="save" parameterType="com.sohu.cache.entity.AppUser" keyProperty="id" useGeneratedKeys="true">
    	insert into app_user
    		(<include refid="user_insert_column"/>)
		values
			(#{id},#{name},#{chName},#{email},#{mobile},#{weChat},#{type},#{isAlert},#{password},#{company},#{purpose},#{bizId})
    </insert>
    
    <delete id="delete" parameterType="long">
    	delete from app_user where id=#{id}
    </delete>

    <update id="updatePwd">
    	update app_user
    		set password=#{password}
    	where id=#{id}
    </update>

    <update id="update" parameterType="com.sohu.cache.entity.AppUser">
    	update app_user 
    		set name=#{name}, ch_name=#{chName}, email=#{email}, mobile=#{mobile}, weChat=#{weChat}, type=#{type}, isAlert=#{isAlert}, company=#{company}, purpose=#{purpose}, biz_id=#{bizId}
    	where id=#{id}
    </update>
    
    <select id="getUserList" resultType="com.sohu.cache.entity.AppUser" parameterType="string">
    	select           
        	<include refid="user_column"/>
        from app_user where 1=1
        <choose>
        	<when test="chName != '' and chName != null">
        	 	and ch_name=#{chName}
        	</when>
        </choose>
    </select>

    <select id="getUserWithBizList" resultType="com.sohu.cache.web.vo.AppUserVo">
        select
            au.id, au.name, au.ch_name, au.email, au.mobile, au.weChat, au.type,
            au.isAlert, au.password, au.company, au.purpose, au.register_time, au.biz_id,
            ab.name bizName, ab.biz_desc
        from app_user au
        left join app_biz ab
            on au.biz_id = ab.id
        <where>
            <choose>
                <when test="chName != '' and chName != null">
                    and au.ch_name=#{chName}
                </when>
            </choose>
            <choose>
                <when test="bizName != '' and bizName != null">
                    and ab.name=#{bizName}
                </when>
            </choose>
        </where>
    </select>

    <select id="getAllUser" resultType="com.sohu.cache.entity.AppUser">
        select
        <include refid="user_column"/>
        from app_user where type >= 0
    </select>

    <select id="getAdminList" resultType="com.sohu.cache.entity.AppUser">
        select
        <include refid="user_column"/>
        from app_user where type = 0
    </select>
    
</mapper>


