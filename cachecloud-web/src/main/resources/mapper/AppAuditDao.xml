<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sohu.cache.dao.AppAuditDao">
    <sql id="columns">
    	app_id,user_id,user_name,type,param1,param2,param3,info,status,modify_time
    </sql>

    <select id="selectWaitAppAudits" resultType="com.sohu.cache.entity.AppAudit">
        select id,<include refid="columns"/>,task_id,create_time,operate_id,refuse_reason
        from app_audit
        <where>
            <choose>
                <when test="status != null and status!=4">and status=#{status}</when>
                <when test="status == null">and status in (0,2)</when>
            </choose>
            <choose>
                <when test="type != null">and type=#{type}</when>
            </choose>
            <choose>
                <when test="auditId != null">and id=#{auditId}</when>
            </choose>
            <choose>
                <when test="userId != null">and user_id=#{userId}</when>
            </choose>
            <choose>
                <when test="operateId != null">and operate_id=#{operateId}</when>
            </choose>
        </where>
        order by create_time desc
    </select>

    <select id="getAppAudit" resultType="com.sohu.cache.entity.AppAudit">
        select id,<include refid="columns"/>,create_time,refuse_reason
        from app_audit
        where id=#{id}
    </select>

    <insert id="insertAppAudit" parameterType="com.sohu.cache.entity.AppAudit" keyProperty="id" useGeneratedKeys="true">
        insert into app_audit(<include refid="columns"/>)
        values(#{appId},#{userId},#{userName},#{type},#{param1},#{param2},#{param3},#{info},#{status},#{modifyTime})
    </insert>

    <update id="updateAppAuditUser" parameterType="com.sohu.cache.entity.AppAudit">
        update app_audit
        set
          status = #{status},
          operate_id = #{operateId},
          modify_time = current_timestamp()
        where id=#{id}
    </update>

    <update id="updateAppAuditOperateUser" parameterType="com.sohu.cache.entity.AppAudit">
        update app_audit
        set
          operate_id = #{operateId},
          modify_time = current_timestamp()
        where id=#{id}
    </update>

    <update id="updateAppAudit" parameterType="com.sohu.cache.entity.AppAudit">
        update app_audit
        set
          status = #{status},
          modify_time = current_timestamp()
        where id=#{id}
    </update>

    <update id="updateRefuseReason" parameterType="com.sohu.cache.entity.AppAudit">
        update app_audit
        set
          refuse_reason = #{refuseReason}, modify_time = current_timestamp()
        where id=#{id}
    </update>

    <select id="getAppAuditByAppId" resultType="com.sohu.cache.entity.AppAudit">
        select id,<include refid="columns"/>,create_time,refuse_reason
        from app_audit
        where app_id=#{appId}
    </select>

    <select id="getAppAuditByCondition" resultType="com.sohu.cache.entity.AppAudit">
        select id,<include refid="columns"/>,create_time,refuse_reason
        from app_audit
        where app_id=#{appId} and type=#{type}
    </select>

    <select id="getAppAuditByTypeAndTimeRange" resultType="com.sohu.cache.entity.AppAudit">
        select id,<include refid="columns"/>,create_time,refuse_reason
        from app_audit
        where app_id=#{appId}
            and type=#{type}
            <choose>
                <when test="startTime != null and endTime != null">
                    and modify_time between #{startTime} and #{endTime}
                </when>
            </choose>
            order by modify_time desc
    </select>

    <update id="updateTaskId">
        update app_audit set task_id = #{taskId}, modify_time = now() where id=#{id}
    </update>

    <select id="getStatisticGroupByStatus" resultType="hashmap">
        select sum(1) count,status
        from app_audit
        <where>
            <choose>
                <when test="operateId != null">and operate_id=#{operateId}</when>
            </choose>
            <choose>
                <when test="userId != null">and user_id=#{userId}</when>
            </choose>
            <choose>
                <when test="startTime != null and endTime != null">and modify_time between #{startTime} and #{endTime}
                </when>
            </choose>
        </where>
        group by status;
    </select>

    <select id="getStatisticGroupByType" resultType="hashmap">
        select sum(1) count,type
        from app_audit
        <where>
            <choose>
                <when test="operateId != null">and operate_id=#{operateId}</when>
            </choose>
            <choose>
                <when test="userId != null">and user_id=#{userId}</when>
            </choose>
            <choose>
                <when test="startTime != null and endTime != null">and modify_time between #{startTime} and #{endTime}
                </when>
            </choose>
        </where>
        group by type;
    </select>

</mapper>